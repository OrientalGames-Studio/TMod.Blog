@using TMod.Blog.Web.Core.Components.Admin
@using TMod.Blog.Web.Services.Abstraction
@using TMod.Blog.Web.Models

@inherits LayoutComponentBase
@layout MainLayout

<PageTitle>@_pageTitle - π‹¿Ì∂À</PageTitle>
<MudLayout>
    <MudAppBar>
        <AdminAppToolbar MenuBreakpoint="Breakpoint.SmAndDown" OnShowMenuButtonClick="@(_=>_isOpen = !_isOpen)"/>        
        <ExternalToolbar/>
    </MudAppBar>
    <MudDrawer ClipMode="DrawerClipMode.Always" Fixed @bind-Open="_isOpen" Breakpoint="Breakpoint.Sm">
        <MudDrawerHeader>
            <BlogBrand />
        </MudDrawerHeader>
        <BlogNavMenus MenuItems="_menuItems" />
    </MudDrawer>
    <MudDrawerContainer>
        <MudMainContent>
            <MudContainer>
                <BlogBreadCrumbs MenuItems="_menuItems"/>
                @Body
            </MudContainer>
        </MudMainContent>
    </MudDrawerContainer>
</MudLayout>

@code {
    private bool _isOpen = true;
    private IEnumerable<MenuItem>? _menuItems;
    private string _pageTitle;

    [Inject(Key = "AdminNavMenuService")]
    public INavMenuProviderService? NavMenuProviderService { get; set; }

    [CascadingParameter]
    public IAppConfigurationProviderService? AppConfigurationProviderService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _menuItems = NavMenuProviderService?.GetNavMenuItems();
        _pageTitle = await AppConfigurationProviderService!.GetConfigurationValueAsync("AppTitle")??"";
    }
}